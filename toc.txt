
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class APIMethodsFetcher {
    public static void main(String[] args) {
        String apiUrl = "https://api.example.com"; // Replace with the API's base URL
        String endpoint = "/methods"; // Replace with the API's endpoint that provides method information

        try {
            HttpClient httpClient = HttpClients.createDefault();
            HttpGet httpGet = new HttpGet(apiUrl + endpoint);

            HttpResponse response = httpClient.execute(httpGet);
            HttpEntity entity = response.getEntity();

            if (entity != null) {
                String jsonString = EntityUtils.toString(entity);
                // Now, parse the JSON response to get the method names
                // Depending on the JSON structure, you may use libraries like Jackson or Gson
                // For simplicity, we'll assume the response contains an array of method names
                // You can adapt this code based on the actual response format.
                // Example assuming JSON structure: { "methods": ["method1", "method2", ...] }
                // JSON parsing code would be something like:
                // JSONObject jsonObject = new JSONObject(jsonString);
                // JSONArray methodsArray = jsonObject.getJSONArray("methods");

                // Dummy example:
                String[] methodsArray = {"method1", "method2", "method3"};

                // Print the method names
                for (String methodName : methodsArray) {
                    System.out.println(methodName);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




import java.util.ArrayList;
import java.util.List;

public class ListComparison {
    public static void main(String[] args) {
        List<String> list1 = new ArrayList<>();
        list1.add("A");
        list1.add("B");
        list1.add("C");
        list1.add("D");

        List<String> list2 = new ArrayList<>();
        list2.add("B");
        list2.add("C");
        list2.add("E");
        list2.add("F");

        List<String> extraData = new ArrayList<>(list1);
        extraData.removeAll(list2);

        List<String> missingData = new ArrayList<>(list2);
        missingData.removeAll(list1);

        System.out.println("Extra Data in list1: " + extraData);
        System.out.println("Missing Data in list1: " + missingData);
    }
}




Download from https://github.com/ndas1971/PyQs.git
file python_advanced_final_reference.zip
mail-id  ndas1971@gmail.com 
----------------------------------------
Day1
Quick core concepts 
Modules and Packages
   Definition and Creating a User Module
   Byte compilation of Module
   Invoking Modules - import statement
   Calling attributes and functions of a Module ­ prefixing modulename
   Calling specific functions/attributes ­ from .. import statement
   Creating alias names for methods in import statement
   Getting the attributs/methods of a module ­ dir()
   Help on a method ­ help()
   Reloading a module ­ reload()
   Knowing the list of installed modules ­ help('modules')
   Running modules individually as a program - __name__=='__main__'
   What is a package and Use of a package
   __init__.py file and its use
   Relation between packages and modules
  Installing modules and packages using pip
Regex in Python
  Regular expressions in Python ­ the re module
  Elements of a Python-style regular expression
  Anchors (Assertions)
  Literal characters
  Character groups
  Counts
  Alternation
  Grouping
  Modifiers
  re methods - re.match, re.search, res.sub, re.compile, re.purge
  More examples on regular expressions
  Some popular regular expressions
Advanced Data Structures 
    xml 
    json 
    csv 
Database Connectivity
   MySQL Database
   Connection to a database server
   Drivers for MySQL and other databases
   The basic principles of databases
   Using MySQL from Python
   Executing SQL statements ­ DDL and DML
   Using SQL select
   Retrieving the data from SQL table to Python for display
   Executing Stored Procedures
Python Standard Library
  os and os.path
  sys
  math, cmath
  zlib
  glob
  datetime, dateutil,time
  __builtin__
  string
  random
  timeit
  unittest

Day2 :
Object Orieted Programming in Python
  Introduction to OOPs
  Classes and objects
  Class attributes, class methods
  Object attributes, Object methods
  Constructors and Destructors
  Inheritance ­ single, multilevel, multiple, hierarchical, hybrid
  Polymorphism ­ Method overriding and Operator Overloading
  Private, public and protected variables
  Dynamic binding and message passing examples
  Realtime Applications of OOPs
Multithreading and Multiprocessing
  Multithreading
  Multiprocessing
DataFrames
  Introduction to Pandas
  Introduction to numpy
Day3
CGI
Python
  What is CGI?
  Creating and Executing CGI scripts in Python
  Get & Post methods
  input fields,checkboxes,radiobuttons,textboxes,dropboxes
   Programs and Examples
Introduction to Django
  What is a webframework?
  Introduction to Django
  Django Database access in Python
  Basics of web programming
  What is Django?
  MTV pattern
  Creating a simple blog using 

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class JavaScriptInjectionExample {
    public static void main(String[] args) {
        // Set the path to the ChromeDriver executable
        System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver");

        // Create a new instance of the ChromeDriver
        WebDriver driver = new ChromeDriver();

        // Navigate to the desired webpage
        driver.get("https://www.example.com");

        // Cast the WebDriver instance to a JavascriptExecutor
        JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;

        // Define the JavaScript code to be injected
        String javascriptCode = 
            "(() => {\n" +
            "   // Override the XMLHttpRequest object\n" +
            "   let originalXhr = window.XMLHttpRequest;\n" +
            "   function newXHR() {\n" +
            "       let xhr = new originalXhr();\n" +
            "       // Interceptor for the 'open' method\n" +
            "       let originalOpen = xhr.open;\n" +
            "       xhr.open = function(method, url, async) {\n" +
            "           console.log('API call:', method, url); // Log the API call information\n" +
            "           originalOpen.apply(this, arguments);\n" +
            "       };\n" +
            "       return xhr;\n" +
            "   }\n" +
            "   window.XMLHttpRequest = newXHR;\n" +
            "})();";

        // Execute the JavaScript code in the current Selenium session
        jsExecutor.executeScript(javascriptCode);

        // Continue with the rest of your Selenium automation script
        // ...

        // Close the browser session
        driver.quit();
    }
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import java.io.IOException;

public class JiraTaskCreationExample {
    private static final String JIRA_API_URL = "https://your-jira-instance.com/rest/api/2/issue/";
    private static final String JIRA_USERNAME = "your-username";
    private static final String JIRA_API_TOKEN = "your-api-token";

    public static void main(String[] args) {
        String projectKey = "PROJECT_KEY";
        String issueType = "Task";
        String summary = "Example Task";
        String description = "This is an example task created via API";

        String requestBody = "{\"fields\":{\"project\":{\"key\":\"" + projectKey + "\"}," +
                "\"issuetype\":{\"name\":\"" + issueType + "\"}," +
                "\"summary\":\"" + summary + "\"," +
                "\"description\":\"" + description + "\"}}";

        OkHttpClient client = new OkHttpClient();
        RequestBody body = RequestBody.create(requestBody, MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(JIRA_API_URL)
                .post(body)
                .addHeader("Authorization", "Basic " + getBase64EncodedCredentials())
                .build();

        try {
            Response response = client.newCall(request).execute();
            if (response.isSuccessful()) {
                System.out.println("Task created successfully!");
                System.out.println("Response body: " + response.body().string());
            } else {
                System.out.println("Failed to create task. Response code: " + response.code());
                System.out.println("Response body: " + response.body().string());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getBase64EncodedCredentials() {
        String credentials = JIRA_USERNAME + ":" + JIRA_API_TOKEN;
        return java.util.Base64.getEncoder().encodeToString(credentials.getBytes());
    }
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.IOException;

public class ExcelToJiraTaskCreation {
    private static final String JIRA_API_URL = "https://your-jira-instance.com/rest/api/2/issue/";
    private static final String JIRA_USERNAME = "your-username";
    private static final String JIRA_API_TOKEN = "your-api-token";

    public static void main(String[] args) {
        String excelFilePath = "path/to/your/excel/file.xlsx";
        String projectKey = "PROJECT_KEY";
        String issueType = "Task";

        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            for (Row row : sheet) {
                String summary = row.getCell(0).getStringCellValue();
                String description = row.getCell(1).getStringCellValue();

                createJiraTask(projectKey, issueType, summary, description);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void createJiraTask(String projectKey, String issueType, String summary, String description) {
        String requestBody = "{\"fields\":{\"project\":{\"key\":\"" + projectKey + "\"}," +
                "\"issuetype\":{\"name\":\"" + issueType + "\"}," +
                "\"summary\":\"" + summary + "\"," +
                "\"description\":\"" + description + "\"}}";

        OkHttpClient client = new OkHttpClient();
        RequestBody body = RequestBody.create(requestBody, MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(JIRA_API_URL)
                .post(body)
                .addHeader("Authorization", "Basic " + getBase64EncodedCredentials())
                .build();

        try {
            Response response = client.newCall(request).execute();
            if (response.isSuccessful()) {
                System.out.println("Task created successfully!");
                System.out.println("Response body: " + response.body().string());
            } else {
                System.out.println("Failed to create task. Response code: " + response.code());
                System.out.println("Response body: " + response.body().string());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getBase64EncodedCredentials() {
        String credentials = JIRA_USERNAME + ":" + JIRA_API_TOKEN;
        return java.util.Base64.getEncoder().encodeToString(credentials.getBytes());
    }
}




import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.IOException;

public class ExcelToJiraTaskCreation {
    private static final String JIRA_API_URL = "https://your-jira-instance.com/rest/api/2/issue/";

    public static void main(String[] args) {
        if (args.length < 1 || args.length % 2 != 0) {
            System.err.println("Invalid arguments provided!");
            System.err.println("Usage: java ExcelToJiraTaskCreation <-option1 value1> <-option2 value2> ...");
            System.exit(1);
        }

        String excelFilePath = "";
        String projectKey = "";
        String issueType = "";
        String jiraUsername = "";
        String jiraApiToken = "";

        // Process the command-line arguments
        for (int i = 0; i < args.length; i += 2) {
            String option = args[i];
            String value = args[i + 1];

            switch (option) {
                case "-excelFilePath":
                    excelFilePath = value;
                    break;
                case "-projectKey":
                    projectKey = value;
                    break;
                case "-issueType":
                    issueType = value;
                    break;
                case "-jiraUsername":
                    jiraUsername = value;
                    break;
                case "-jiraApiToken":
                    jiraApiToken = value;
                    break;
                default:
                    System.err.println("Invalid option: " + option);
                    System.exit(1);
            }
        }

        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            for (Row row : sheet) {
                String summary = row.getCell(0).getStringCellValue();
                String description = row.getCell(1).getStringCellValue();

                createJiraTask(projectKey, issueType, summary, description, jiraUsername, jiraApiToken);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


import java.util.ArrayList;
import java.util.List;

public class ListComparison {
    public static void main(String[] args) {
        List<String> list1 = new ArrayList<>();
        list1.add("A");
        list1.add("B");
        list1.add("C");
        list1.add("D");

        List<String> list2 = new ArrayList<>();
        list2.add("B");
        list2.add("C");
        list2.add("E");
        list2.add("F");

        List<String> extraData = new ArrayList<>();
        List<String> missingData = new ArrayList<>();

        // Find extra data in list1
        for (String item : list1) {
            if (!list2.contains(item)) {
                extraData.add(item);
            }
        }

        // Find missing data in list1
        for (String item : list2) {
            if (!list1.contains(item)) {
                missingData.add(item);
            }
        }

        System.out.println("Extra Data in list1: " + extraData);
        System.out.println("Missing Data in list1: " + missingData);
    }
}


    private static void createJiraTask(String projectKey, String issueType, String summary, String description,
                                       String jiraUsername, String jiraApiToken) {
        // Rest of the code remains the same...

        // Replace JIRA_USERNAME and JIRA_API_TOKEN with the user-provided credentials
        String credentials = jiraUsername + ":" + jiraApiToken;
        String base64Credentials = java.util.Base64.getEncoder().encodeToString(credentials.getBytes());

        // Add the Authorization header with the user-provided credentials
        Request request = new Request.Builder()
                .url(JIRA_API_URL)
                .post(body)
                .addHeader("Authorization", "Basic " + base64Credentials)
                .build();

        // Rest of the code remains the same...
    }
}


java ExcelToJiraTaskCreation -excelFilePath "path/to/your/excel/file.xlsx" -projectKey "PROJECT_KEY" -issueType "Task" -jiraUsername "your-username" -jiraApiToken "your-api-token"









