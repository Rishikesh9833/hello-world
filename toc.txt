
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class APIMethodsFetcher {
    public static void main(String[] args) {
        String apiUrl = "https://api.example.com"; // Replace with the API's base URL
        String endpoint = "/methods"; // Replace with the API's endpoint that provides method information

        try {
            HttpClient httpClient = HttpClients.createDefault();
            HttpGet httpGet = new HttpGet(apiUrl + endpoint);

            HttpResponse response = httpClient.execute(httpGet);
            HttpEntity entity = response.getEntity();

            if (entity != null) {
                String jsonString = EntityUtils.toString(entity);
                // Now, parse the JSON response to get the method names
                // Depending on the JSON structure, you may use libraries like Jackson or Gson
                // For simplicity, we'll assume the response contains an array of method names
                // You can adapt this code based on the actual response format.
                // Example assuming JSON structure: { "methods": ["method1", "method2", ...] }
                // JSON parsing code would be something like:
                // JSONObject jsonObject = new JSONObject(jsonString);
                // JSONArray methodsArray = jsonObject.getJSONArray("methods");

                // Dummy example:
                String[] methodsArray = {"method1", "method2", "method3"};

                // Print the method names
                for (String methodName : methodsArray) {
                    System.out.println(methodName);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




import java.util.ArrayList;
import java.util.List;

public class ListComparison {
    public static void main(String[] args) {
        List<String> list1 = new ArrayList<>();
        list1.add("A");
        list1.add("B");
        list1.add("C");
        list1.add("D");

        List<String> list2 = new ArrayList<>();
        list2.add("B");
        list2.add("C");
        list2.add("E");
        list2.add("F");

        List<String> extraData = new ArrayList<>(list1);
        extraData.removeAll(list2);

        List<String> missingData = new ArrayList<>(list2);
        missingData.removeAll(list1);

        System.out.println("Extra Data in list1: " + extraData);
        System.out.println("Missing Data in list1: " + missingData);
    }
}




Download from https://github.com/ndas1971/PyQs.git
file python_advanced_final_reference.zip
mail-id  ndas1971@gmail.com 
----------------------------------------
Day1
Quick core concepts 
Modules and Packages
   Definition and Creating a User Module
   Byte compilation of Module
   Invoking Modules - import statement
   Calling attributes and functions of a Module ­ prefixing modulename
   Calling specific functions/attributes ­ from .. import statement
   Creating alias names for methods in import statement
   Getting the attributs/methods of a module ­ dir()
   Help on a method ­ help()
   Reloading a module ­ reload()
   Knowing the list of installed modules ­ help('modules')
   Running modules individually as a program - __name__=='__main__'
   What is a package and Use of a package
   __init__.py file and its use
   Relation between packages and modules
  Installing modules and packages using pip
Regex in Python
  Regular expressions in Python ­ the re module
  Elements of a Python-style regular expression
  Anchors (Assertions)
  Literal characters
  Character groups
  Counts
  Alternation
  Grouping
  Modifiers
  re methods - re.match, re.search, res.sub, re.compile, re.purge
  More examples on regular expressions
  Some popular regular expressions
Advanced Data Structures 
    xml 
    json 
    csv 
Database Connectivity
   MySQL Database
   Connection to a database server
   Drivers for MySQL and other databases
   The basic principles of databases
   Using MySQL from Python
   Executing SQL statements ­ DDL and DML
   Using SQL select
   Retrieving the data from SQL table to Python for display
   Executing Stored Procedures
Python Standard Library
  os and os.path
  sys
  math, cmath
  zlib
  glob
  datetime, dateutil,time
  __builtin__
  string
  random
  timeit
  unittest

Day2 :
Object Orieted Programming in Python
  Introduction to OOPs
  Classes and objects
  Class attributes, class methods
  Object attributes, Object methods
  Constructors and Destructors
  Inheritance ­ single, multilevel, multiple, hierarchical, hybrid
  Polymorphism ­ Method overriding and Operator Overloading
  Private, public and protected variables
  Dynamic binding and message passing examples
  Realtime Applications of OOPs
Multithreading and Multiprocessing
  Multithreading
  Multiprocessing
DataFrames
  Introduction to Pandas
  Introduction to numpy
Day3
CGI
Python
  What is CGI?
  Creating and Executing CGI scripts in Python
  Get & Post methods
  input fields,checkboxes,radiobuttons,textboxes,dropboxes
   Programs and Examples
Introduction to Django
  What is a webframework?
  Introduction to Django
  Django Database access in Python
  Basics of web programming
  What is Django?
  MTV pattern
  Creating a simple blog using 

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class JavaScriptInjectionExample {
    public static void main(String[] args) {
        // Set the path to the ChromeDriver executable
        System.setProperty("webdriver.chrome.driver", "/path/to/chromedriver");

        // Create a new instance of the ChromeDriver
        WebDriver driver = new ChromeDriver();

        // Navigate to the desired webpage
        driver.get("https://www.example.com");

        // Cast the WebDriver instance to a JavascriptExecutor
        JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;

        // Define the JavaScript code to be injected
        String javascriptCode = 
            "(() => {\n" +
            "   // Override the XMLHttpRequest object\n" +
            "   let originalXhr = window.XMLHttpRequest;\n" +
            "   function newXHR() {\n" +
            "       let xhr = new originalXhr();\n" +
            "       // Interceptor for the 'open' method\n" +
            "       let originalOpen = xhr.open;\n" +
            "       xhr.open = function(method, url, async) {\n" +
            "           console.log('API call:', method, url); // Log the API call information\n" +
            "           originalOpen.apply(this, arguments);\n" +
            "       };\n" +
            "       return xhr;\n" +
            "   }\n" +
            "   window.XMLHttpRequest = newXHR;\n" +
            "})();";

        // Execute the JavaScript code in the current Selenium session
        jsExecutor.executeScript(javascriptCode);

        // Continue with the rest of your Selenium automation script
        // ...

        // Close the browser session
        driver.quit();
    }
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import java.io.IOException;

public class JiraTaskCreationExample {
    private static final String JIRA_API_URL = "https://your-jira-instance.com/rest/api/2/issue/";
    private static final String JIRA_USERNAME = "your-username";
    private static final String JIRA_API_TOKEN = "your-api-token";

    public static void main(String[] args) {
        String projectKey = "PROJECT_KEY";
        String issueType = "Task";
        String summary = "Example Task";
        String description = "This is an example task created via API";

        String requestBody = "{\"fields\":{\"project\":{\"key\":\"" + projectKey + "\"}," +
                "\"issuetype\":{\"name\":\"" + issueType + "\"}," +
                "\"summary\":\"" + summary + "\"," +
                "\"description\":\"" + description + "\"}}";

        OkHttpClient client = new OkHttpClient();
        RequestBody body = RequestBody.create(requestBody, MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(JIRA_API_URL)
                .post(body)
                .addHeader("Authorization", "Basic " + getBase64EncodedCredentials())
                .build();

        try {
            Response response = client.newCall(request).execute();
            if (response.isSuccessful()) {
                System.out.println("Task created successfully!");
                System.out.println("Response body: " + response.body().string());
            } else {
                System.out.println("Failed to create task. Response code: " + response.code());
                System.out.println("Response body: " + response.body().string());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getBase64EncodedCredentials() {
        String credentials = JIRA_USERNAME + ":" + JIRA_API_TOKEN;
        return java.util.Base64.getEncoder().encodeToString(credentials.getBytes());
    }
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.IOException;

public class ExcelToJiraTaskCreation {
    private static final String JIRA_API_URL = "https://your-jira-instance.com/rest/api/2/issue/";
    private static final String JIRA_USERNAME = "your-username";
    private static final String JIRA_API_TOKEN = "your-api-token";

    public static void main(String[] args) {
        String excelFilePath = "path/to/your/excel/file.xlsx";
        String projectKey = "PROJECT_KEY";
        String issueType = "Task";

        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            for (Row row : sheet) {
                String summary = row.getCell(0).getStringCellValue();
                String description = row.getCell(1).getStringCellValue();

                createJiraTask(projectKey, issueType, summary, description);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void createJiraTask(String projectKey, String issueType, String summary, String description) {
        String requestBody = "{\"fields\":{\"project\":{\"key\":\"" + projectKey + "\"}," +
                "\"issuetype\":{\"name\":\"" + issueType + "\"}," +
                "\"summary\":\"" + summary + "\"," +
                "\"description\":\"" + description + "\"}}";

        OkHttpClient client = new OkHttpClient();
        RequestBody body = RequestBody.create(requestBody, MediaType.parse("application/json"));
        Request request = new Request.Builder()
                .url(JIRA_API_URL)
                .post(body)
                .addHeader("Authorization", "Basic " + getBase64EncodedCredentials())
                .build();

        try {
            Response response = client.newCall(request).execute();
            if (response.isSuccessful()) {
                System.out.println("Task created successfully!");
                System.out.println("Response body: " + response.body().string());
            } else {
                System.out.println("Failed to create task. Response code: " + response.code());
                System.out.println("Response body: " + response.body().string());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getBase64EncodedCredentials() {
        String credentials = JIRA_USERNAME + ":" + JIRA_API_TOKEN;
        return java.util.Base64.getEncoder().encodeToString(credentials.getBytes());
    }
}




import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.IOException;

public class ExcelToJiraTaskCreation {
    private static final String JIRA_API_URL = "https://your-jira-instance.com/rest/api/2/issue/";

    public static void main(String[] args) {
        if (args.length < 1 || args.length % 2 != 0) {
            System.err.println("Invalid arguments provided!");
            System.err.println("Usage: java ExcelToJiraTaskCreation <-option1 value1> <-option2 value2> ...");
            System.exit(1);
        }

        String excelFilePath = "";
        String projectKey = "";
        String issueType = "";
        String jiraUsername = "";
        String jiraApiToken = "";

        // Process the command-line arguments
        for (int i = 0; i < args.length; i += 2) {
            String option = args[i];
            String value = args[i + 1];

            switch (option) {
                case "-excelFilePath":
                    excelFilePath = value;
                    break;
                case "-projectKey":
                    projectKey = value;
                    break;
                case "-issueType":
                    issueType = value;
                    break;
                case "-jiraUsername":
                    jiraUsername = value;
                    break;
                case "-jiraApiToken":
                    jiraApiToken = value;
                    break;
                default:
                    System.err.println("Invalid option: " + option);
                    System.exit(1);
            }
        }

        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

            for (Row row : sheet) {
                String summary = row.getCell(0).getStringCellValue();
                String description = row.getCell(1).getStringCellValue();

                createJiraTask(projectKey, issueType, summary, description, jiraUsername, jiraApiToken);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


import java.util.ArrayList;
import java.util.List;

public class ListComparison {
    public static void main(String[] args) {
        List<String> list1 = new ArrayList<>();
        list1.add("A");
        list1.add("B");
        list1.add("C");
        list1.add("D");

        List<String> list2 = new ArrayList<>();
        list2.add("B");
        list2.add("C");
        list2.add("E");
        list2.add("F");

        List<String> extraData = new ArrayList<>();
        List<String> missingData = new ArrayList<>();

        // Find extra data in list1
        for (String item : list1) {
            if (!list2.contains(item)) {
                extraData.add(item);
            }
        }

        // Find missing data in list1
        for (String item : list2) {
            if (!list1.contains(item)) {
                missingData.add(item);
            }
        }

        System.out.println("Extra Data in list1: " + extraData);
        System.out.println("Missing Data in list1: " + missingData);
    }
}


    private static void createJiraTask(String projectKey, String issueType, String summary, String description,
                                       String jiraUsername, String jiraApiToken) {
        // Rest of the code remains the same...

        // Replace JIRA_USERNAME and JIRA_API_TOKEN with the user-provided credentials
        String credentials = jiraUsername + ":" + jiraApiToken;
        String base64Credentials = java.util.Base64.getEncoder().encodeToString(credentials.getBytes());

        // Add the Authorization header with the user-provided credentials
        Request request = new Request.Builder()
                .url(JIRA_API_URL)
                .post(body)
                .addHeader("Authorization", "Basic " + base64Credentials)
                .build();

        // Rest of the code remains the same...
    }
}


java ExcelToJiraTaskCreation -excelFilePath "path/to/your/excel/file.xlsx" -projectKey "PROJECT_KEY" -issueType "Task" -jiraUsername "your-username" -jiraApiToken "your-api-token"


import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class TarGzCreator {
    public static void main(String[] args) {
        String sourceFolder = "/path/to/source/folder";
        String outputTarGz = "/path/to/output/archive.tar.gz";

        try {
            FileOutputStream fos = new FileOutputStream(outputTarGz);
            GzipCompressorOutputStream gzOut = new GzipCompressorOutputStream(fos);
            TarArchiveOutputStream tarOut = new TarArchiveOutputStream(gzOut);

            addFilesToTar(tarOut, sourceFolder, "");

            tarOut.finish();
            tarOut.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void addFilesToTar(TarArchiveOutputStream tarOut, String filePath, String parent) throws IOException {
        File file = new File(filePath);
        String entryName = parent + file.getName();

        TarArchiveEntry tarEntry = new TarArchiveEntry(file, entryName);
        tarOut.putArchiveEntry(tarEntry);

        if (file.isFile()) {
            try (FileInputStream fis = new FileInputStream(file)) {
                byte[] buffer = new byte[1024];
                int bytesRead;
                while ((bytesRead = fis.read(buffer)) != -1) {
                    tarOut.write(buffer, 0, bytesRead);
                }
                tarOut.closeArchiveEntry();
            }
        } else if (file.isDirectory()) {
            tarOut.closeArchiveEntry();
            for (File nestedFile : file.listFiles()) {
                addFilesToTar(tarOut, nestedFile.getAbsolutePath(), entryName + "/");
            }
        }
    }
}

Achieved Goals:

I successfully achieved all of my individual goals, ensuring timely completion of tasks and projects.
I consistently met deadlines, maintaining a 98% task completion rate, demonstrating my commitment to delivering on time.
By streamlining processes, I improved my personal productivity by 15%, contributing to the team's success.
I maintained a customer satisfaction rate of 95% or higher through my personalized approach to addressing client needs.
Client-Centric Solutions:

I conducted in-depth client needs assessments to tailor solutions to their specific requirements and objectives.
My innovative strategies effectively addressed unique client challenges, leading to a 20% increase in customer retention.
Regular communication with clients allowed me to promptly address their evolving needs and provide tailored solutions.
I introduced cost-effective solutions that saved clients an average of 10% in operational expenses through my contributions.
Teamwork and Leadership:

I actively promoted teamwork by fostering open and respectful communication within the team and across departments.
I provided leadership by sharing knowledge, mentoring colleagues, and facilitating skill development initiatives.
I celebrated the unique strengths of each team member, creating a collaborative and inclusive work environment.
I exhibited adaptability and resilience when facing challenges, showcasing effective leadership and teamwork, especially in times of crisis.
Sound Judgment and Integrity:

I consistently adhered to ethical standards and company policies, upholding honesty, trust, and transparency in all of my work.
I made well-informed decisions based on data and analysis, resulting in 95% accuracy in predictions and problem-solving.
I proactively reported and addressed issues, ensuring the integrity of our projects and relationships.
I maintained the highest level of professionalism, earning the trust and respect of colleagues and clients through my actions.
This revised version focuses on the achievements and contributions of a single employee across the four specified areas.




User
inculde more points specific to automation testing
ChatGPT
Certainly, if you're looking to include more points specific to automation testing in your self-evaluation, here's an expanded version:

Achieved Automation Testing Goals:

I successfully met all of my automation testing goals, contributing to the overall efficiency of our testing process.
I automated test cases for [specific project or module], resulting in a significant reduction in manual testing efforts.
Through the implementation of test automation, I achieved a 30% increase in test coverage and reduced regression testing time by 50%.
My continuous improvement efforts in automation scripting led to a 95% pass rate in automated test cases.
Client-Centric Automation Solutions:

I tailored automation solutions to address the specific needs of clients, ensuring comprehensive test coverage and reliability.
My automation scripts provided clients with quicker feedback on the stability of their applications, enhancing their development cycles.
I actively engaged with clients to understand their automation requirements and successfully delivered customized solutions.
By automating repetitive and time-consuming test cases, I enabled clients to save valuable time and resources.
Teamwork and Leadership in Automation:

I collaborated closely with the testing team and development team to ensure seamless integration of automation into the development pipeline.
I took the lead in training team members in automation testing techniques, contributing to their professional development.
My leadership in test automation fostered a culture of innovation and efficiency within the testing team.
In challenging situations, I provided guidance and support, demonstrating effective teamwork and leadership in automation initiatives.
Sound Judgment, Integrity, and Automation Quality:

I exercised sound judgment when selecting test cases for automation, prioritizing those that provided the greatest ROI.
I consistently adhered to best practices in test automation, ensuring the integrity of test results.
I actively monitored and maintained our automated test suite, promptly addressing any issues to uphold its reliability.
I conducted rigorous code reviews for automation scripts, ensuring the highest level of quality and adherence to industry standards.
Automation Skill Development:

I actively pursued skill development in automation testing through continuous learning, staying updated with the latest tools and technologies.
I attended relevant workshops and courses to enhance my automation skills, which resulted in improved testing efficiency.
I shared my knowledge with the team, helping them to improve their automation capabilities and stay aligned with industry best practices.
Including these points will give a more detailed perspective on your contributions in the field of automation testing during the annual review process.



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TestSnap Pro Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }
        header {
            background-color: #2c3e50;
            color: white;
            padding: 10px 20px;
            text-align: center;
        }
        header .logo {
            font-size: 24px;
            font-weight: bold;
        }
        nav {
            background-color: #34495e;
            padding: 10px;
            text-align: center;
        }
        nav a {
            color: white;
            margin: 0 10px;
            text-decoration: none;
        }
        .container {
            display: flex;
        }
        .sidebar {
            width: 200px;
            background-color: #ecf0f1;
            padding: 20px;
        }
        .content {
            flex: 1;
            padding: 20px;
        }
        .quick-snapshot {
            background-color: #2980b9;
            color: white;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            margin-bottom: 20px;
        }
        .recent-snapshots {
            background-color: white;
            padding: 20px;
            margin-bottom: 20px;
        }
        .common-details {
            background-color: white;
            padding: 20px;
        }
        .common-details input, .common-details textarea {
            width: 100%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        footer {
            background-color: #34495e;
            color: white;
            text-align: center;
            padding: 10px 0;
            position: fixed;
            width: 100%;
            bottom: 0;
        }
    </style>
</head>
<body>

<header>
    <div class="logo">TestSnap Pro</div>
</header>

<nav>
    <a href="#">Dashboard</a>
    <a href="#">Screenshots</a>
    <a href="#">Integrations</a>
    <a href="#">Settings</a>
    <a href="#">Help</a>
</nav>

<div class="container">
    <div class="sidebar">
        <h3>Applications</h3>
        <ul>
            <li><input type="checkbox" checked> App 1</li>
            <li><input type="checkbox" checked> App 2</li>
            <li><input type="checkbox"> App 3</li>
            <li><input type="checkbox"> App 4</li>
        </ul>
        <h3>Settings</h3>
        <ul>
            <li><a href="#">Preferences</a></li>
            <li><a href="#">Account</a></li>
        </ul>
    </div>
    
    <div class="content">
        <div class="quick-snapshot">Take Quick Snapshot</div>
        
        <div class="recent-snapshots">
            <h3>Recent Snapshots</h3>
            <ul>
                <li>Snapshot 1 - App 1, App 2</li>
                <li>Snapshot 2 - App 3</li>
                <li>Snapshot 3 - App 1, App 4</li>
            </ul>
        </div>
        
        <div class="common-details">
            <h3>Common Details</h3>
            <form>
                <input type="text" placeholder="Project Name">
                <input type="text" placeholder="Test Case ID">
                <textarea placeholder="Description"></textarea>
                <button type="submit">Save Details</button>
            </form>
        </div>
    </div>
</div>

<footer>
    &copy; 2024 TestSnap Pro. All rights reserved.
</footer>

</body>
</html>


