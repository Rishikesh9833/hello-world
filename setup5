To implement the enhanced user interaction flow for generating test cases based on user requests, we need to ensure that the application handles all specified requirements. Here's a detailed guide and code to achieve this functionality:

1. Project Structure
Ensure you have the following files in your project:

arduino
Copy code
test_generator/
│
├── app.py
├── utils.py
├── responses.py
├── config.json
├── prompts.json
├── test_data.csv
├── requirements.txt
2. Update config.json
Add the greetings and prompts:

json
Copy code
{
    "greetings": [
        "hi",
        "hello",
        "hey",
        "good morning",
        "good afternoon",
        "good evening"
    ]
}
3. Update prompts.json
Define prompts used in interactions:

json
Copy code
{
    "flow_type": "Do you want to check Normal flow, Negative flow, or Both?",
    "special_flow": "Do you want to integrate Hold functionality in the test case, and/or integrate elements from Normal flow and Negative flow into the Special flow?",
    "application": "Do you want to include App1 in the test case?",
    "additional_apps": "Do you want to include App2 through App7 in the test case?",
    "app3": "Do you want to include App3 in the test case?",
    "cancellation": "Do you want to check Cancellation?",
    "system_cancel": "Is it System Cancel or Manual Cancel?",
    "hold_functionality": "Do you want to integrate Hold functionality in the test case?",
    "sample_data": "Do you want to include trade sample data in the test case?",
    "file_types": "Which file types do you want to check for the sample data? Options: CSV, Excel, JSON, XML. (You can select multiple types.)"
}
4. Update utils.py
Add utility functions to handle interactions and file operations:

python
Copy code
import json
import pandas as pd
from fuzzywuzzy import fuzz

# Load greetings and prompts
with open('config.json') as config_file:
    config = json.load(config_file)
greetings = config.get('greetings', [])

with open('prompts.json') as prompts_file:
    prompts = json.load(prompts_file)

def normalize_input(user_input):
    """Normalize user input to lowercase and strip whitespace."""
    return user_input.lower().strip()

def is_greeting(user_input):
    """Check if the input matches any common greeting."""
    return any(fuzz.ratio(user_input, greeting) > 80 for greeting in greetings)

def load_test_data():
    """Load test data from CSV file."""
    return pd.read_csv('test_data.csv')

def get_prompt(prompt_key):
    """Retrieve the prompt text based on the key."""
    return prompts.get(prompt_key, "Prompt not found")
5. Update responses.py
Enhance responses.py to handle generating test cases based on detailed user inputs:

python
Copy code
import pandas as pd
from utils import load_test_data, get_prompt

def get_greeting_response():
    """Return a response for recognized greetings."""
    return "This is Test Generator tool for App1, How can I help you?"

def get_default_response():
    """Return a default response for non-greeting inputs."""
    return "Let's proceed with generating test cases. Please provide more details."

def handle_cancellation(user_request, app_list):
    """Handle cancellation based on user input."""
    if "manual cancel" in user_request:
        return f"Adding manual cancellation steps for {', '.join(app_list)}."
    elif "system cancel" in user_request:
        return f"Adding system cancellation steps and checking trade creation using API for {', '.join(app_list)}."
    else:
        return "No specific cancellation type provided."

def generate_test_cases(user_request, flow_type, include_apps, include_hold, file_types):
    """Generate test cases based on user request and options."""
    test_data = load_test_data()
    
    response = test_data[test_data['Step Description'].str.contains(user_request, case=False, na=False)]
    
    if response.empty:
        return "No test cases found for the provided input."
    
    test_case_output = ""
    
    if flow_type == "Both":
        test_case_output += "Generating test cases for Normal flow...\n"
        test_case_output += generate_flow_test_cases("Normal", include_apps, include_hold, file_types)
        test_case_output += "Generating test cases for Negative flow...\n"
        test_case_output += generate_flow_test_cases("Negative", include_apps, include_hold, file_types)
    else:
        test_case_output += generate_flow_test_cases(flow_type, include_apps, include_hold, file_types)
    
    return test_case_output

def generate_flow_test_cases(flow_type, include_apps, include_hold, file_types):
    """Generate test cases for a specific flow type."""
    steps = load_test_data()
    test_cases = steps[steps['Flow Type'] == flow_type]
    
    # Generate the output
    flow_output = f"Generating test cases for {flow_type} flow...\n"
    
    if include_hold:
        flow_output += "Including Hold functionality...\n"
    
    if include_apps:
        flow_output += f"Including steps for {', '.join(include_apps)}...\n"
    
    if file_types:
        flow_output += f"Checking sample data for file types: {', '.join(file_types)}...\n"
    
    return flow_output + str(test_cases.to_dict(orient='records'))
6. Update app.py
Enhance app.py to handle the complete user interaction flow:

python
Copy code
from flask import Flask, request, jsonify
from utils import normalize_input, is_greeting
from responses import get_greeting_response, get_default_response, generate_test_cases, handle_cancellation

app = Flask(__name__)

@app.route('/message', methods=['POST'])
def handle_message():
    """Handle incoming messages and provide responses."""
    data = request.json
    user_input = data.get('message', '')
    flow_type = data.get('flow_type', '')
    include_apps = data.get('include_apps', [])
    include_hold = data.get('include_hold', False)
    file_types = data.get('file_types', [])
    
    normalized_input = normalize_input(user_input)
    
    if is_greeting(normalized_input):
        response = get_greeting_response()
    else:
        if "generate" in normalized_input:
            if "cancel" in normalized_input or "negative" in normalized_input:
                cancellation_response = handle_cancellation(normalized_input, include_apps)
                response = get_default_response() + " " + cancellation_response
            else:
                test_cases = generate_test_cases(normalized_input, flow_type, include_apps, include_hold, file_types)
                response = get_default_response() + " Here are your test cases: " + test_cases
        else:
            response = get_default_response() + " Please provide a valid request."
    
    return jsonify({"response": response})

if __name__ == '__main__':
    app.run(debug=True)
7. Testing
Run the Flask Application

Navigate to your project directory and start the Flask application:

sh
Copy code
cd path/to/test_generator
python app.py
Use Postman or Curl to Test

Send POST requests to test the application. For example, using curl:

sh
Copy code
curl -X POST http://127.0.0.1:5000/message -H "Content-Type: application/json" -d '{
  "message": "Generate trade creation test case",
  "flow_type": "Both",
  "include_apps": ["App1", "App5"],
  "include_hold": true,
  "file_types": ["CSV", "Excel"]
}'
Summary
Project Structure: Organize the project files.
Configuration Files: Use config.json for greetings and prompts.json for prompts.
Utility Functions: Handle input normalization and file operations.
Response Functions: Generate test cases and handle interactions.
Flask Application: Manage the user interaction flow and integrate functionalities.
Testing: Validate the application with real requests.
This setup should now handle generating test cases based on user inputs, including special cases, flow types, and application selections.





You said:
as this is a web app create beafuiful intactive chat bot with result in tabluer format having columns as TCID, Test summery , Precodndition, Test Steps, Expected result etc
ChatGPT said:
ChatGPT
Memory updated
To create an interactive and visually appealing chatbot for generating test cases, I'll provide you with the steps and code to build this web application. We'll use Python, Flask for the backend, and HTML/CSS with Bootstrap for a responsive UI. Here's how we can structure the project:

1. Project Structure
Create a project directory with the following structure:

arduino
Copy code
test_case_generator/
│
├── static/
│   ├── css/
│   │   └── styles.css
├── templates/
│   ├── index.html
│   └── result.html
├── data/
│   ├── test_data.csv
│   └── prompts.json
├── app.py
├── chat_logic.py
├── test_case_generator.py
└── requirements.txt
2. CSV and JSON Files
test_data.csv: Store your test case steps, applications, and flows here.
prompts.json: Store chatbot prompts and responses to avoid hardcoding in Python files.
3. Dependencies
Create a requirements.txt file:

plaintext
Copy code
Flask
pandas
nltk
flask-bootstrap
4. chat_logic.py
This file will handle the logic for the chatbot.

python
Copy code
import pandas as pd
import json
import nltk
from difflib import get_close_matches

nltk.download('punkt')

# Load CSV Data
test_data = pd.read_csv('data/test_data.csv')

# Load JSON prompts
with open('data/prompts.json', 'r') as file:
    prompts = json.load(file)

# Initialize Chatbot State
chatbot_state = {
    "flow_type": None,
    "apps": [],
    "hold": False,
    "cancel_type": None,
    "sample_data": []
}

def process_user_input(user_input):
    words = nltk.word_tokenize(user_input.lower())
    response = ""

    # Check for greeting
    greetings = ["hi", "hello", "hey"]
    if any(word in greetings for word in words):
        return "This is Test Generator tool for App1, How can I help you?"

    # Flow Type
    if chatbot_state["flow_type"] is None:
        if "negative" in words and "normal" in words:
            chatbot_state["flow_type"] = "both"
            response = prompts['both_flows']
        elif "negative" in words:
            chatbot_state["flow_type"] = "negative"
            response = prompts['negative_flow']
        elif "normal" in words:
            chatbot_state["flow_type"] = "normal"
            response = prompts['normal_flow']
        return response

    # Application Selection
    # Add logic to check if apps are already selected
    app_list = ['App1', 'App2', 'App3', 'App4', 'App5', 'App6', 'App7']
    for app in app_list:
        if app.lower() in words and app not in chatbot_state["apps"]:
            chatbot_state["apps"].append(app)
            response += f"{app} selected. "

    # Hold Check
    if "hold" in words and not chatbot_state["hold"]:
        chatbot_state["hold"] = True
        response += prompts['hold_integration']

    # Cancel Check
    if "cancel" in words and chatbot_state["cancel_type"] is None:
        chatbot_state["cancel_type"] = "system" if "system" in words else "manual"
        response += prompts['cancel_check']

    return response if response else "I didn't understand that. Could you please rephrase?"

def generate_test_case():
    # Test case generation logic based on chatbot_state
    pass  # Implement the logic to create test cases
5. app.py
This file will be the main entry point for the Flask app.

python
Copy code
from flask import Flask, render_template, request
from chat_logic import process_user_input, generate_test_case

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/message', methods=['POST'])
def message():
    user_input = request.form['user_input']
    response = process_user_input(user_input)
    return render_template('index.html', response=response)

@app.route('/result', methods=['GET'])
def result():
    test_cases = generate_test_case()
    return render_template('result.html', test_cases=test_cases)

if __name__ == '__main__':
    app.run(debug=True)
6. HTML Templates
index.html: For the chatbot interface.
result.html: To display the generated test cases.
html
Copy code
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Test Case Generator</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="chat-container">
        <h1>Test Generator Chatbot</h1>
        <div class="chat-box">
            {{ response }}
        </div>
        <form action="/message" method="POST">
            <input type="text" name="user_input" placeholder="Type your message here...">
            <button type="submit">Send</button>
        </form>
    </div>
</body>
</html>
html
Copy code
<!-- result.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Test Case Results</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <h1>Generated Test Cases</h1>
    <table>
        <thead>
            <tr>
                <th>TCID</th>
                <th>Test Summary</th>
                <th>Preconditions</th>
                <th>Test Steps</th>
                <th>Expected Result</th>
            </tr>
        </thead>
        <tbody>
            {% for test_case in test_cases %}
            <tr>
                <td>{{ test_case.TCID }}</td>
                <td>{{ test_case.Test_Summary }}</td>
                <td>{{ test_case.Preconditions }}</td>
                <td>{{ test_case.Test_Steps }}</td>
                <td>{{ test_case.Expected_Result }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
7. CSS Styles
Add custom styles in styles.css for a more polished look.

8. Run the App
Install dependencies:
bash
Copy code
pip install -r requirements.txt
Start the Flask app:
bash
Copy code
python app.py
Open your browser and navigate to http://127.0.0.1:5000.
This setup will provide a chatbot interface that interacts with users, generates test cases based on input, and displays results in a tabular format.


1. Test Case Generation Logic in chat_logic.py
You can add the logic to generate test cases based on the user's input stored in chatbot_state. This will involve selecting steps based on the flow type, application selections, and whether to include cancellation and hold functionality.

python
Copy code
def generate_test_case():
    test_cases = []

    # Basic structure for test case
    test_case_template = {
        "TCID": "",
        "Test_Summary": "",
        "Preconditions": "",
        "Test_Steps": [],
        "Expected_Result": ""
    }

    # Generate test case ID
    tc_id = 1

    # Generate test cases based on flow type
    if chatbot_state["flow_type"] in ["normal", "both"]:
        # Normal flow test case
        normal_test_case = test_case_template.copy()
        normal_test_case["TCID"] = f"TC{tc_id:03}"
        normal_test_case["Test_Summary"] = "Normal Flow Test Case"
        normal_test_case["Preconditions"] = "Ensure the system is in a stable state."
        
        # Add steps based on app selection
        normal_test_case["Test_Steps"] = generate_steps_for_apps(chatbot_state["apps"])
        
        # Hold functionality
        if chatbot_state["hold"]:
            normal_test_case["Test_Steps"].extend(generate_hold_steps())
        
        # Cancellation
        if chatbot_state["cancel_type"]:
            normal_test_case["Test_Steps"].extend(generate_cancellation_steps(chatbot_state["cancel_type"]))
        
        # Expected result
        normal_test_case["Expected_Result"] = "The test case should pass without any errors."

        test_cases.append(normal_test_case)
        tc_id += 1

    if chatbot_state["flow_type"] in ["negative", "both"]:
        # Negative flow test case
        negative_test_case = test_case_template.copy()
        negative_test_case["TCID"] = f"TC{tc_id:03}"
        negative_test_case["Test_Summary"] = "Negative Flow Test Case"
        negative_test_case["Preconditions"] = "Ensure the system is in a stable state."
        
        # Add steps based on app selection
        negative_test_case["Test_Steps"] = generate_steps_for_apps(chatbot_state["apps"], negative=True)
        
        # Hold functionality
        if chatbot_state["hold"]:
            negative_test_case["Test_Steps"].extend(generate_hold_steps())
        
        # Cancellation
        if chatbot_state["cancel_type"]:
            negative_test_case["Test_Steps"].extend(generate_cancellation_steps(chatbot_state["cancel_type"]))
        
        # Expected result
        negative_test_case["Expected_Result"] = "The system should handle errors gracefully and produce appropriate error messages."

        test_cases.append(negative_test_case)

    return test_cases

def generate_steps_for_apps(apps, negative=False):
    steps = []
    for app in apps:
        if negative:
            steps.append(f"Attempt to create a trade in {app} with invalid data and verify error handling.")
        else:
            steps.append(f"Create a trade in {app} and verify the creation process.")
    return steps

def generate_hold_steps():
    return ["Hold the trade and verify that it is held successfully in all applicable systems."]

def generate_cancellation_steps(cancel_type):
    if cancel_type == "system":
        return ["Cancel the trade using the system API and verify that it is cancelled in all systems."]
    else:
        return ["Cancel the trade manually in the application and verify that it is cancelled in all systems."]
2. CSS for the Chatbot Interface - styles.css
This CSS file will ensure that your chatbot interface is clean, modern, and responsive.

css
Copy code
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.chat-container {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    width: 400px;
    padding: 20px;
    text-align: center;
}

.chat-container h1 {
    font-size: 24px;
    margin-bottom: 20px;
}

.chat-box {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    margin-bottom: 15px;
    height: 150px;
    overflow-y: auto;
    background-color: #f9f9f9;
    text-align: left;
}

.chat-box p {
    margin: 0;
    padding: 5px 0;
}

form {
    display: flex;
    justify-content: space-between;
}

input[type="text"] {
    width: 75%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

button {
    width: 20%;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 8px;
    text-align: center;
}

th {
    background-color: #007bff;
    color: white;
}
3. Test Cases Integration in result.html
You can display the generated test cases in a tabular format using the result.html template.

html
Copy code
<!-- result.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Test Case Results</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
    <div class="chat-container">
        <h1>Generated Test Cases</h1>
        <table>
            <thead>
                <tr>
                    <th>TCID</th>
                    <th>Test Summary</th>
                    <th>Preconditions</th>
                    <th>Test Steps</th>
                    <th>Expected Result</th>
                </tr>
            </thead>
            <tbody>
                {% for test_case in test_cases %}
                <tr>
                    <td>{{ test_case['TCID'] }}</td>
                    <td>{{ test_case['Test_Summary'] }}</td>
                    <td>{{ test_case['Preconditions'] }}</td>
                    <td>
                        <ul>
                            {% for step in test_case['Test_Steps'] %}
                            <li>{{ step }}</li>
                            {% endfor %}
                        </ul>
                    </td>
                    <td>{{ test_case['Expected_Result'] }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</body>
</html>



To ensure that the chatbot logic handles cases where the user has already specified apps in their initial request, you can implement checks to see if specific apps are already selected in the chatbot_state. If they are, the system should skip asking the user about those apps and proceed to the next step.

Updated Test Case Generation Logic
Here’s how you can add the logic to check if apps are already selected:

1. Update generate_test_case Function
Modify the generate_test_case function to incorporate checks for already selected apps.

python
Copy code
def generate_test_case():
    test_cases = []

    # Basic structure for test case
    test_case_template = {
        "TCID": "",
        "Test_Summary": "",
        "Preconditions": "",
        "Test_Steps": [],
        "Expected_Result": ""
    }

    # Generate test case ID
    tc_id = 1

    # Check for flow type
    if chatbot_state["flow_type"] in ["normal", "both"]:
        # Normal flow test case
        normal_test_case = test_case_template.copy()
        normal_test_case["TCID"] = f"TC{tc_id:03}"
        normal_test_case["Test_Summary"] = "Normal Flow Test Case"
        normal_test_case["Preconditions"] = "Ensure the system is in a stable state."
        
        # Add steps based on app selection
        normal_test_case["Test_Steps"] = generate_steps_for_apps(chatbot_state["apps"])
        
        # Hold functionality
        if chatbot_state["hold"]:
            normal_test_case["Test_Steps"].extend(generate_hold_steps())
        
        # Cancellation
        if chatbot_state["cancel_type"]:
            normal_test_case["Test_Steps"].extend(generate_cancellation_steps(chatbot_state["cancel_type"]))
        
        # Expected result
        normal_test_case["Expected_Result"] = "The test case should pass without any errors."

        test_cases.append(normal_test_case)
        tc_id += 1

    if chatbot_state["flow_type"] in ["negative", "both"]:
        # Negative flow test case
        negative_test_case = test_case_template.copy()
        negative_test_case["TCID"] = f"TC{tc_id:03}"
        negative_test_case["Test_Summary"] = "Negative Flow Test Case"
        negative_test_case["Preconditions"] = "Ensure the system is in a stable state."
        
        # Add steps based on app selection
        negative_test_case["Test_Steps"] = generate_steps_for_apps(chatbot_state["apps"], negative=True)
        
        # Hold functionality
        if chatbot_state["hold"]:
            negative_test_case["Test_Steps"].extend(generate_hold_steps())
        
        # Cancellation
        if chatbot_state["cancel_type"]:
            negative_test_case["Test_Steps"].extend(generate_cancellation_steps(chatbot_state["cancel_type"]))
        
        # Expected result
        negative_test_case["Expected_Result"] = "The system should handle errors gracefully and produce appropriate error messages."

        test_cases.append(negative_test_case)

    return test_cases

def generate_steps_for_apps(apps, negative=False):
    steps = []
    all_apps = ['App1', 'App2', 'App3', 'App4', 'App5', 'App6', 'App7']

    for app in all_apps:
        if app in apps:
            if negative:
                steps.append(f"Attempt to create a trade in {app} with invalid data and verify error handling.")
            else:
                steps.append(f"Create a trade in {app} and verify the creation process.")
    
    return steps

def generate_hold_steps():
    return ["Hold the trade and verify that it is held successfully in all applicable systems."]

def generate_cancellation_steps(cancel_type):
    if cancel_type == "system":
        return ["Cancel the trade using the system API and verify that it is cancelled in all systems."]
    else:
        return ["Cancel the trade manually in the application and verify that it is cancelled in all systems."]
2. Update the Chatbot Flow to Check for Selected Apps
Modify the chatbot flow to skip asking about apps that have already been selected:

python
Copy code
def handle_user_input(user_input):
    if "generate" in user_input.lower():
        # Start the process of generating a test case
        chatbot_state["request"] = user_input
        detect_flow_type()
        detect_selected_apps(user_input)
        ask_about_flow_type()
    # Other logic to handle additional inputs, greetings, etc.

def detect_selected_apps(user_input):
    apps = ["App1", "App2", "App3", "App4", "App5", "App6", "App7"]
    for app in apps:
        if app.lower() in user_input.lower():
            chatbot_state["apps"].append(app)
3. Enhance ask_about_flow_type to Skip Already Selected Apps
python
Copy code
def ask_about_flow_type():
    if "flow_type" not in chatbot_state:
        flow_type = input("Do you want to check Normal flow, Negative flow, or Both?")
        chatbot_state["flow_type"] = flow_type.lower()
        
        if chatbot_state["apps"]:
            ask_about_remaining_apps()
        else:
            ask_about_apps()

def ask_about_apps():
    apps_to_check = ["App1", "App2", "App4", "App5", "App6", "App7"]

    for app in apps_to_check:
        if app not in chatbot_state["apps"]:
            user_input = input(f"Do you want to include {app} in the test case?")
            if user_input.lower() in ["yes", "y"]:
                chatbot_state["apps"].append(app)
    
    if chatbot_state["flow_type"] == "negative":
        ask_about_app3()

    ask_about_cancellation()

def ask_about_remaining_apps():
    apps_to_check = ["App1", "App2", "App4", "App5", "App6", "App7"]
    remaining_apps = [app for app in apps_to_check if app not in chatbot_state["apps"]]

    for app in remaining_apps:
        user_input = input(f"Do you want to include {app} in the test case?")
        if user_input.lower() in ["yes", "y"]:
            chatbot_state["apps"].append(app)

    if chatbot_state["flow_type"] == "negative":
        ask_about_app3()

    ask_about_cancellation()

def ask_about_app3():
    user_input = input("Do you want to include App3 in the test case?")
    if user_input.lower() in ["yes", "y"]:
        chatbot_state["apps"].append("App3")

def ask_about_cancellation():
    if "cancel" in chatbot_state["request"].lower() or chatbot_state["flow_type"] == "negative":
        cancel_type = input("Is it System Cancel or Manual Cancel?")
        chatbot_state["cancel_type"] = cancel_type.lower()
    else:
        cancel_option = input("Do you want to check Cancellation?")
        if cancel_option.lower() in ["yes", "y"]:
            cancel_type = input("Is it System Cancel or Manual Cancel?")
            chatbot_state["cancel_type"] = cancel_type.lower()

    if chatbot_state["flow_type"] == "both":
        generate_test_case()
4. Ensure All Logic Is Integrated
Make sure all methods are properly integrated into the overall flow. This code ensures that the chatbot intelligently skips asking redundant questions about already selected apps and proceeds with generating the test cases based on user inputs.

5. Test the Application
Finally, run your Flask application and test it by inputting different scenarios. For example:

Inputting "Generate a test case for App1 with normal flow."
Inputting "Generate a test case with negative flow including App2 and App5."
This should prompt the application to skip asking about the already selected apps and proceed with the rest of the flow.

The chatbot should then generate the test cases and display them in a tabular format on the results 
